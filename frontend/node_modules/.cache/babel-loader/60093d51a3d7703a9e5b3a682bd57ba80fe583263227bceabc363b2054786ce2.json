{"ast":null,"code":"var _jsxFileName = \"/home/harshit/Desktop/random/project/mern_split_wise_project/frontend/src/components/Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Contacts = () => {\n  _s();\n  var _location$state;\n  const [contacts, setContacts] = useState([]);\n  const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n  const [selectedContacts, setSelectedContacts] = useState([]);\n  const [groupName, setGroupName] = useState('');\n  const location = useLocation();\n  const emailFromLogin = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.emailFromLogin;\n  const history = useHistory();\n  useEffect(() => {\n    const unlisten = history.listen((location, action) => {\n      if (action === 'POP') {\n        navigate('/login', {\n          state: {\n            email\n          }\n        });\n      }\n    });\n    return () => {\n      unlisten(); // Cleanup listener\n    };\n  }, [history]);\n  console.log(\"i am sanchit\");\n  console.log(emailFromLogin);\n  useEffect(() => {\n    const fetchContacts = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/contacts', {\n          params: {\n            email: emailFromLogin\n          }\n        });\n\n        // Process the response to create simplified contacts array with IDs\n        const processedContacts = response.data.map((contact, index) => ({\n          id: index + 1,\n          // Assign incrementing ID starting from 1\n          email: contact // Assume there's at least one email address\n        }));\n        setContacts(processedContacts);\n      } catch (error) {\n        console.error('Error fetching contacts:', error);\n        // Handle error state or logging as needed\n      }\n    };\n    fetchContacts(); // Call fetchContacts when component mounts\n  }, [emailFromLogin]); // Empty dependency array ensures fetchContacts runs only once\n\n  const handleCheckboxChange = (name, email) => {\n    const contactIdentifier = `${name}-${email}`;\n    setSelectedContacts(prevSelectedContacts => prevSelectedContacts.includes(contactIdentifier) ? prevSelectedContacts.filter(id => id !== contactIdentifier) : [...prevSelectedContacts, contactIdentifier]);\n  };\n  const handleCreateGroupClick = () => {\n    setIsCreatingGroup(true);\n  };\n  const handleGroupNameChange = event => {\n    setGroupName(event.target.value);\n  };\n  const handleSubmitGroup = () => {\n    axios.post('http://localhost:3001/create-group', {\n      groupName,\n      contacts: selectedContacts\n    }).then(response => {\n      console.log(response.data);\n      // Handle success response\n    }).catch(error => {\n      console.error(error);\n      // Handle error response\n    });\n    setIsCreatingGroup(false);\n    setSelectedContacts([]);\n    setGroupName('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [isCreatingGroup && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedContacts.includes(`${contact.name}-${contact.email}`),\n          onChange: () => handleCheckboxChange(contact.name, contact.email)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this), contact.name, \": \", contact.email]\n      }, `${contact.name}-${contact.email}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateGroupClick,\n      children: \"Create Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), isCreatingGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Group Name\",\n        value: groupName,\n        onChange: handleGroupNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitGroup,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(Contacts, \"CIZrRI2fgf3/REBB2AvPbsxOGSk=\", false, function () {\n  return [useLocation, useHistory];\n});\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useEffect","useState","axios","useLocation","useNavigate","useHistory","jsxDEV","_jsxDEV","Contacts","_s","_location$state","contacts","setContacts","isCreatingGroup","setIsCreatingGroup","selectedContacts","setSelectedContacts","groupName","setGroupName","location","emailFromLogin","state","history","unlisten","listen","action","navigate","email","console","log","fetchContacts","response","get","params","processedContacts","data","map","contact","index","id","error","handleCheckboxChange","name","contactIdentifier","prevSelectedContacts","includes","filter","handleCreateGroupClick","handleGroupNameChange","event","target","value","handleSubmitGroup","post","then","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","placeholder","_c","$RefreshReg$"],"sources":["/home/harshit/Desktop/random/project/mern_split_wise_project/frontend/src/components/Contacts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nconst Contacts = () => {\n    const [contacts, setContacts] = useState([]);\n    const [isCreatingGroup, setIsCreatingGroup] = useState(false);\n    const [selectedContacts, setSelectedContacts] = useState([]);\n    const [groupName, setGroupName] = useState('');\n    const location = useLocation();\n    const emailFromLogin = location.state?.emailFromLogin;\n    const history = useHistory();\n\n  useEffect(() => {\n    const unlisten = history.listen((location, action) => {\n      if (action === 'POP') {\n        navigate('/login', { state: { email }});\n      }\n    });\n\n    return () => {\n      unlisten(); // Cleanup listener\n    };\n  }, [history]);\n    console.log(\"i am sanchit\")\n    console.log(emailFromLogin)\n\n    useEffect(() => {\n        const fetchContacts = async () => {\n            \n            try {\n                const response = await axios.get('http://localhost:3001/contacts', {\n                    params: {\n                        email: emailFromLogin,\n                    },\n                });\n                \n                // Process the response to create simplified contacts array with IDs\n                const processedContacts = response.data.map((contact, index) => ({\n                    id: index + 1, // Assign incrementing ID starting from 1\n                    email: contact, // Assume there's at least one email address\n                }));\n    \n                setContacts(processedContacts);\n            } catch (error) {\n                console.error('Error fetching contacts:', error);\n                // Handle error state or logging as needed\n            }\n        };\n    \n        fetchContacts(); // Call fetchContacts when component mounts\n    \n    }, [emailFromLogin]); // Empty dependency array ensures fetchContacts runs only once\n    \n\n    const handleCheckboxChange = (name, email) => {\n        const contactIdentifier = `${name}-${email}`;\n        setSelectedContacts(prevSelectedContacts => \n            prevSelectedContacts.includes(contactIdentifier)\n                ? prevSelectedContacts.filter(id => id !== contactIdentifier)\n                : [...prevSelectedContacts, contactIdentifier]\n        );\n    };\n\n    const handleCreateGroupClick = () => {\n        setIsCreatingGroup(true);\n    };\n\n    const handleGroupNameChange = (event) => {\n        setGroupName(event.target.value);\n    };\n\n    const handleSubmitGroup = () => {\n        axios.post('http://localhost:3001/create-group', { groupName, contacts: selectedContacts })\n            .then(response => {\n                console.log(response.data);\n                // Handle success response\n            })\n            .catch(error => {\n                console.error(error);\n                // Handle error response\n            });\n        setIsCreatingGroup(false);\n        setSelectedContacts([]);\n        setGroupName('');\n    };\n\n    return (\n        <div>\n            <h1>Contacts</h1>\n            <ul>\n                {contacts.map(contact => (\n                    <li key={`${contact.name}-${contact.email}`}>\n                        {isCreatingGroup && \n                            <input \n                                type=\"checkbox\" \n                                checked={selectedContacts.includes(`${contact.name}-${contact.email}`)} \n                                onChange={() => handleCheckboxChange(contact.name, contact.email)}\n                            />\n                        }\n                        {contact.name}: {contact.email}\n                    </li>\n                ))}\n            </ul>\n            <button onClick={handleCreateGroupClick}>Create Group</button>\n            {isCreatingGroup && (\n                <div>\n                    <input \n                        type=\"text\" \n                        placeholder=\"Group Name\" \n                        value={groupName} \n                        onChange={handleGroupNameChange} \n                    />\n                    <button onClick={handleSubmitGroup}>Submit</button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Contacts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}